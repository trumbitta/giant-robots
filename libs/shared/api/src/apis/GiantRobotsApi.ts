/* tslint:disable */
/* eslint-disable */
/**
 * Giant Robots
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GiantRobot,
    GiantRobotFromJSON,
    GiantRobotToJSON,
} from '../models';

export interface GetGiantRobotByIdRequest {
    id: string;
}

/**
 * 
 */
export class GiantRobotsApi extends runtime.BaseAPI {

    /**
     * Returns a single pet
     * Find giant robot by ID
     */
    async getGiantRobotByIdRaw(requestParameters: GetGiantRobotByIdRequest): Promise<runtime.ApiResponse<GiantRobot>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGiantRobotById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/giant-robots/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GiantRobotFromJSON(jsonValue));
    }

    /**
     * Returns a single pet
     * Find giant robot by ID
     */
    async getGiantRobotById(requestParameters: GetGiantRobotByIdRequest): Promise<GiantRobot> {
        const response = await this.getGiantRobotByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all the giant robots
     */
    async getGiantRobotsRaw(): Promise<runtime.ApiResponse<Array<GiantRobot>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/giant-robots`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GiantRobotFromJSON));
    }

    /**
     * Get all the giant robots
     */
    async getGiantRobots(): Promise<Array<GiantRobot>> {
        const response = await this.getGiantRobotsRaw();
        return await response.value();
    }

}
